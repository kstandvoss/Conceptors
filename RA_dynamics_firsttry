# -*- coding: utf-8 -*-
"""
Created on Sun Nov 29 16:44:50 2015

@author: Art_Rich
"""

from RF_Reservoir import *
import pattCat
from matplotlib.pyplot import *
import numpy as np
import functions

#%%

""" get sinus patterns """

patterns = []

for p in [3, 2, 1, 0]:
    patterns.append(pattCat.patts[p])

#%%

""" train conceptors """

A = RF_Reservoir()
A.load(patterns, gradient_load = True, gradient_c = True)

""" recall learned patterns via single conceptors """

A.recall()
functions.plot_interpolate_1d(patterns, A.Y_recalls)

#%%

""" get conceptor activation and do recall with linear combination of conceptors """

syllable_length = 100
n_syllables = len(patterns)
drive_length = syllable_length * n_syllables

c_activation = np.zeros([drive_length, len(patterns)])

for i in range(n_syllables):
    drive = np.random.rand(len(patterns))
    drive = drive / np.sum(drive)
    #drive = np.zeros(n_syllables)
    #drive[i] = 1
    
    c_activation[i*syllable_length : (i+1)*syllable_length,:] = drive

# real pattern combination
y_real = np.zeros(drive_length)
for i in range(drive_length):
    p_values = np.zeros(len(patterns))
    for p in range(len(patterns)):
        p_values[p] = patterns[p](i)
    y_real[i] = np.dot(p_values.T, c_activation[i])

# c_activation recall
A.recall(c_activation = c_activation)
figure()
subplot(2,1,1)
plot(np.linspace(0,drive_length-1,drive_length), np.squeeze(np.array(A.Y_recalls)))
title('Recall (linear combination of Conceptors)')
subplot(2,1,2)
plot(np.linspace(0,drive_length-1,drive_length), y_real)
title('Actual linear combination of the sinusoids')
